{"version":3,"file":"webservice_config.min.js","sources":["../src/webservice_config.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * AMD module to handle the Webservice configuration actions for Datacurso.\n * It performs setup, token regeneration, and registration calls and\n * displays progress via UI notifications and a simple log list.\n *\n * @module      aiprovider_datacurso/webservice_config\n * @copyright   2025 Wilber Narvaez <wilber@buendata.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from \"core/notification\";\nimport {get_string as getString} from \"core/str\";\nimport Templates from \"core/templates\";\nimport {\n  webserviceSetup,\n  webserviceRegenerateToken,\n  webserviceGetStatus,\n} from \"aiprovider_datacurso/repository\";\n\nconst LOG_REGION_SELECTOR =\n  '[data-region=\"aiprovider_datacurso/webservice-log\"]';\nconst logEntries = [];\n\n/**\n * Initialize the webservice configuration.\n */\nexport function init() {\n  const root = document.querySelector(\n    '[data-region=\"aiprovider_datacurso/webservice-root\"]'\n  );\n  if (!root) {\n    return;\n  }\n  bindHandlers(root);\n}\n\n/**\n * Bind action buttons handlers inside provided root.\n * @param {HTMLElement} root\n */\nfunction bindHandlers(root) {\n  if (!root) {\n    return;\n  }\n  const btnSetup = root.querySelector(\n    '[data-region=\"aiprovider_datacurso/webservice-btn-setup\"]'\n  );\n  const btnRetry = root.querySelector(\n    '[data-region=\"aiprovider_datacurso/webservice-btn-retry\"]'\n  );\n  const btnRegenerate = root.querySelector(\n    '[data-region=\"aiprovider_datacurso/webservice-btn-regenerate\"]'\n  );\n  if (btnSetup) {\n    btnSetup.addEventListener(\"click\", setup);\n  }\n  if (btnRetry) {\n    btnRetry.addEventListener(\"click\", retry);\n  }\n  if (btnRegenerate) {\n    btnRegenerate.addEventListener(\"click\", regenerate);\n  }\n}\n\n/**\n * Setup the webservice for Datacurso.\n */\nasync function setup() {\n  try {\n    const message = await getString('ws_step_setup', 'aiprovider_datacurso');\n    log(message);\n    const res = await webserviceSetup();\n    if (res.messages && Array.isArray(res.messages)) {\n      res.messages.forEach((m) => log(m));\n    }\n    await refreshStatus();\n    Notification.addNotification({\n      message: \"Done: setup\",\n      type: \"success\",\n    });\n  } catch (e) {\n    Notification.exception(e);\n    log(\"Error: \" + (e.message || e), \"error\");\n  }\n}\n\n/**\n * Retry the webservice setup for Datacurso.\n */\nasync function retry() {\n    try {\n        const message = await getString('ws_step_token_retry', 'aiprovider_datacurso');\n        log(message);\n        const res = await webserviceSetup();\n        res.messages.forEach((m) => log(m));\n        await refreshStatus();\n        Notification.addNotification({\n          message: \"Done: retry\",\n          type: \"success\",\n        });\n      } catch (e) {\n        Notification.exception(e);\n        log(\"Error: \" + (e.message || e), \"error\");\n      }\n}\n\n/**\n * Regenerate the webservice token for Datacurso.\n */\nasync function regenerate() {\n  try {\n    const message = await getString('ws_step_token_regenerating', 'aiprovider_datacurso');\n    log(message);\n    const res = await webserviceRegenerateToken();\n    res.messages.forEach((m) => log(m));\n    await refreshStatus();\n    Notification.addNotification({\n      message: \"Done: regenerate\",\n      type: \"success\",\n    });\n  } catch (e) {\n    Notification.exception(e);\n    log(\"Error: \" + (e.message || e), \"error\");\n  }\n}\n\n/**\n * Log a message to the webservice log.\n *\n * @param {string} msg The message to log.\n * @param {string} type The type of the message.\n */\nfunction log(msg, type = \"info\") {\n  logEntries.push({msg, type});\n  appendLogEntry({msg, type});\n}\n\n/**\n * Append a single entry to the rendered log when available.\n *\n * @param {{msg: string, type: string}} entry\n */\nfunction appendLogEntry(entry) {\n  const list = document.querySelector(LOG_REGION_SELECTOR);\n  if (!list) {\n    return;\n  }\n  list.appendChild(createLogItem(entry));\n}\n\n/**\n * Render all known log entries inside the provided root.\n *\n * @param {HTMLElement} root\n */\nfunction renderLogHistory(root) {\n  if (!root) {\n    return;\n  }\n  const list = root.querySelector(LOG_REGION_SELECTOR);\n  if (!list) {\n    return;\n  }\n  list.innerHTML = \"\";\n  logEntries.forEach((entry) => {\n    list.appendChild(createLogItem(entry));\n  });\n}\n\n/**\n * Build a log list item element.\n *\n * @param {{msg: string, type: string}} entry\n * @returns {HTMLLIElement}\n */\nfunction createLogItem(entry) {\n  const li = document.createElement(\"li\");\n  li.textContent = entry.msg;\n  li.classList.add(\"mb-1\");\n  if (entry.type === \"success\") {\n    li.classList.add(\"text-success\");\n  } else if (entry.type === \"error\") {\n    li.classList.add(\"text-danger\");\n  } else {\n    li.classList.add(\"text-muted\");\n  }\n  return li;\n}\n\n/**\n * Refresh UI from current status via AJAX without page reload.\n * @returns {Promise<void>}\n */\nasync function refreshStatus() {\n  try {\n    const status = await webserviceGetStatus();\n    await renderAll(status);\n  } catch (e) {\n    // Silent fail to avoid blocking UI, but log for visibility.\n    log(\"Status refresh error: \" + (e.message || e), \"error\");\n  }\n}\n\n/**\n * Render full template with latest status and rebind handlers.\n * @param {Object} status\n */\nasync function renderAll(status) {\n  const root = document.querySelector('[data-region=\"aiprovider_datacurso/webservice-root\"]');\n  if (!root) {\n    return;\n  }\n  const render = await Templates.renderForPromise('aiprovider_datacurso/webservice_config', status);\n  await Templates.replaceNodeContents(root, render.html, render.js);\n  const newRoot = document.querySelector('[data-region=\"aiprovider_datacurso/webservice-root\"]');\n  renderLogHistory(newRoot);\n  bindHandlers(newRoot);\n}\n"],"names":["root","document","querySelector","bindHandlers","logEntries","btnSetup","btnRetry","btnRegenerate","addEventListener","setup","retry","regenerate","log","res","messages","Array","isArray","forEach","m","refreshStatus","addNotification","message","type","e","exception","msg","push","appendLogEntry","entry","list","appendChild","createLogItem","li","createElement","textContent","classList","add","status","render","Templates","renderForPromise","replaceNodeContents","html","js","newRoot","innerHTML","renderLogHistory","renderAll"],"mappings":";;;;;;;;;4FA0CQA,KAAOC,SAASC,cACpB,4DAEGF,YAGLG,aAAaH,+GAZTI,WAAa,YAmBVD,aAAaH,UACfA,kBAGCK,SAAWL,KAAKE,cACpB,6DAEII,SAAWN,KAAKE,cACpB,6DAEIK,cAAgBP,KAAKE,cACzB,kEAEEG,UACFA,SAASG,iBAAiB,QAASC,OAEjCH,UACFA,SAASE,iBAAiB,QAASE,OAEjCH,eACFA,cAAcC,iBAAiB,QAASG,2BAO7BF,YAGXG,UADsB,mBAAU,gBAAiB,+BAE3CC,UAAY,iCACdA,IAAIC,UAAYC,MAAMC,QAAQH,IAAIC,WACpCD,IAAIC,SAASG,SAASC,GAAMN,IAAIM,WAE5BC,sCACOC,gBAAgB,CAC3BC,QAAS,cACTC,KAAM,YAER,MAAOC,yBACMC,UAAUD,GACvBX,IAAI,WAAaW,EAAEF,SAAWE,GAAI,yBAOvBb,YAGPE,UADsB,mBAAU,sBAAuB,gCAErC,kCACdE,SAASG,SAASC,GAAMN,IAAIM,WAC1BC,sCACOC,gBAAgB,CAC3BC,QAAS,cACTC,KAAM,YAER,MAAOC,yBACMC,UAAUD,GACvBX,IAAI,WAAaW,EAAEF,SAAWE,GAAI,yBAO3BZ,iBAGXC,UADsB,mBAAU,6BAA8B,gCAE5C,4CACdE,SAASG,SAASC,GAAMN,IAAIM,WAC1BC,sCACOC,gBAAgB,CAC3BC,QAAS,mBACTC,KAAM,YAER,MAAOC,yBACMC,UAAUD,GACvBX,IAAI,WAAaW,EAAEF,SAAWE,GAAI,mBAU7BX,IAAIa,SAAKH,4DAAO,OACvBlB,WAAWsB,KAAK,CAACD,IAAAA,IAAKH,KAAAA,OACtBK,eAAe,CAACF,IAAAA,IAAKH,KAAAA,gBAQdK,eAAeC,aAChBC,KAAO5B,SAASC,cA3HtB,uDA4HK2B,MAGLA,KAAKC,YAAYC,cAAcH,iBA4BxBG,cAAcH,aACfI,GAAK/B,SAASgC,cAAc,aAClCD,GAAGE,YAAcN,MAAMH,IACvBO,GAAGG,UAAUC,IAAI,QACE,YAAfR,MAAMN,KACRU,GAAGG,UAAUC,IAAI,gBACO,UAAfR,MAAMN,KACfU,GAAGG,UAAUC,IAAI,eAEjBJ,GAAGG,UAAUC,IAAI,cAEZJ,kBAOMb,0BAELkB,aAAe,0DAYAA,cACjBrC,KAAOC,SAASC,cAAc,4DAC/BF,kBAGCsC,aAAeC,mBAAUC,iBAAiB,yCAA0CH,cACpFE,mBAAUE,oBAAoBzC,KAAMsC,OAAOI,KAAMJ,OAAOK,UACxDC,QAAU3C,SAASC,cAAc,kEA3DfF,UACnBA,kBAGC6B,KAAO7B,KAAKE,cA3IlB,uDA4IK2B,OAGLA,KAAKgB,UAAY,GACjBzC,WAAWa,SAASW,QAClBC,KAAKC,YAAYC,cAAcH,aAkDjCkB,CAAiBF,SACjBzC,aAAayC,SApBLG,CAAUV,QAChB,MAAOd,GAEPX,IAAI,0BAA4BW,EAAEF,SAAWE,GAAI"}