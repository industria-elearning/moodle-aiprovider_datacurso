{"version":3,"file":"webservice_config.min.js","sources":["../src/webservice_config.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * AMD module to handle the Webservice configuration actions for Datacurso.\n * It performs setup, token regeneration, and registration calls and\n * displays progress via UI notifications and a simple log list.\n *\n * @module      aiprovider_datacurso/webservice_config\n * @copyright   2025 Wilber Narvaez <wilber@buendata.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from \"core/notification\";\nimport {get_string as getString} from \"core/str\";\nimport {\n  webserviceSetup,\n  webserviceRegenerateToken,\n  webserviceGetStatus,\n} from \"aiprovider_datacurso/repository\";\n\n/**\n * Initialize the webservice configuration.\n */\nexport function init() {\n  const root = document.querySelector(\n    '[data-region=\"aiprovider_datacurso/webservice-root\"]'\n  );\n  if (!root) {\n    return;\n  }\n  const btnSetup = root.querySelector(\n    '[data-region=\"aiprovider_datacurso/webservice-btn-setup\"]'\n  );\n  const btnRetry = root.querySelector(\n    '[data-region=\"aiprovider_datacurso/webservice-btn-retry\"]'\n  );\n  const btnRegenerate = root.querySelector(\n    '[data-region=\"aiprovider_datacurso/webservice-btn-regenerate\"]'\n  );\n\n  if (btnSetup) {\n    btnSetup.addEventListener(\"click\", setup);\n  }\n  if (btnRetry) {\n    btnRetry.addEventListener(\"click\", retry);\n  }\n  if (btnRegenerate) {\n    btnRegenerate.addEventListener(\"click\", regenerate);\n  }\n\n  // Initial refresh to ensure UI reflects current status when page loads.\n  refreshStatus();\n}\n\n/**\n * Setup the webservice for Datacurso.\n */\nasync function setup() {\n  try {\n    const message = await getString('ws_step_setup', 'aiprovider_datacurso');\n    log(message);\n    const res = await webserviceSetup();\n    if (res.messages && Array.isArray(res.messages)) {\n      res.messages.forEach((m) => log(m));\n    }\n    await refreshStatus();\n    Notification.addNotification({\n      message: \"Done: setup\",\n      type: \"success\",\n    });\n  } catch (e) {\n    Notification.exception(e);\n    log(\"Error: \" + (e.message || e), \"error\");\n  }\n}\n\n/**\n * Retry the webservice setup for Datacurso.\n */\nasync function retry() {\n    try {\n        const message = await getString('ws_step_token_retry', 'aiprovider_datacurso');\n        log(message);\n        const res = await webserviceSetup();\n        res.messages.forEach((m) => log(m));\n        await refreshStatus();\n        Notification.addNotification({\n          message: \"Done: retry\",\n          type: \"success\",\n        });\n      } catch (e) {\n        Notification.exception(e);\n        log(\"Error: \" + (e.message || e), \"error\");\n      }\n}\n\n/**\n * Regenerate the webservice token for Datacurso.\n */\nasync function regenerate() {\n  try {\n    const message = await getString('ws_step_token_regenerating', 'aiprovider_datacurso');\n    log(message);\n    const res = await webserviceRegenerateToken();\n    res.messages.forEach((m) => log(m));\n    await refreshStatus();\n    Notification.addNotification({\n      message: \"Done: regenerate\",\n      type: \"success\",\n    });\n  } catch (e) {\n    Notification.exception(e);\n    log(\"Error: \" + (e.message || e), \"error\");\n  }\n}\n\n/**\n * Log a message to the webservice log.\n *\n * @param {string} msg The message to log.\n * @param {string} type The type of the message.\n */\nfunction log(msg, type = \"info\") {\n  const list = document.querySelector(\n    '[data-region=\"aiprovider_datacurso/webservice-log\"]'\n  );\n  if (!list) {\n    return;\n  }\n  const li = document.createElement(\"li\");\n  li.textContent = msg;\n  li.classList.add(\"mb-1\");\n  if (type === \"success\") {\n    li.classList.add(\"text-success\");\n  } else if (type === \"error\") {\n    li.classList.add(\"text-danger\");\n  } else {\n    li.classList.add(\"text-muted\");\n  }\n  list.appendChild(li);\n}\n\n/**\n * Refresh UI from current status via AJAX without page reload.\n * @returns {Promise<void>}\n */\nasync function refreshStatus() {\n  try {\n    const status = await webserviceGetStatus();\n    updateBadges(status);\n    await updateHeader(status);\n    await updateService(status);\n    await updateRole(status);\n    await updateToken(status);\n    await updateRegistration(status);\n  } catch (e) {\n    // Silent fail to avoid blocking UI, but log for visibility.\n    log(\"Status refresh error: \" + (e.message || e), \"error\");\n  }\n}\n\n/**\n * Update status badges for webservices/rest and assignment.\n * @param {Object} status\n */\nfunction updateBadges(status) {\n  const ws = document.querySelector('[data-region=\"aiprovider_datacurso/ws-enabled\"]');\n  const rest = document.querySelector('[data-region=\"aiprovider_datacurso/rest-enabled\"]');\n  if (ws) {\n    setBadge(ws, !!status.webservicesenabled, 'enabled', 'disabled');\n  }\n  if (rest) {\n    setBadge(rest, !!status.restenabled, 'enabled', 'disabled');\n  }\n  const assigned = document.querySelector('[data-region=\"aiprovider_datacurso/user-assigned-badge\"]');\n  if (assigned) {\n    setBadge(assigned, !!status.userassigned, 'assigned', 'not_assigned');\n  }\n}\n\n/**\n * Update external service badge and name.\n * @param {Object} status\n * @returns {Promise<void>}\n */\nasync function updateService(status) {\n  const badge = document.querySelector('[data-region=\"aiprovider_datacurso/service-badge\"]');\n  const nameEl = document.querySelector('[data-region=\"aiprovider_datacurso/service-name\"]');\n  const exists = !!(status.service && (status.service.id || status.service.name));\n  await setBadge(badge, exists, 'exists', 'not_created');\n  if (nameEl) {\n    nameEl.textContent = exists ? (status.service.name || '') : '';\n  }\n}\n\n/**\n * Update the top header badge (Configured / Needs repair / Not configured).\n * Mirrors the Mustache header logic.\n * @param {Object} status\n * @returns {Promise<void>}\n */\nasync function updateHeader(status) {\n  const el = document.querySelector('[data-region=\"aiprovider_datacurso/header-badge\"]');\n  if (!el) {\n    return;\n  }\n  let cls = 'badge-danger';\n  let key = 'not_configured';\n  if (status.isconfigured) {\n    cls = 'badge-success';\n    key = 'configured';\n  } else if (status.retryonly) {\n    cls = 'badge-warning';\n    key = 'needs_repair';\n  } else if (status.registration && status.registration.lastsent) {\n    if (status.needsrepair) {\n      cls = 'badge-warning';\n      key = 'needs_repair';\n    } else {\n      cls = 'badge-danger';\n      key = 'not_configured';\n    }\n  } else {\n    cls = 'badge-danger';\n    key = 'not_configured';\n  }\n  el.classList.remove('badge-success', 'badge-warning', 'badge-danger');\n  el.classList.add(cls);\n  const label = await getString(key, 'aiprovider_datacurso');\n  el.textContent = label;\n}\n\n/**\n * Update role label visibility/content.\n * @param {Object} status\n * @returns {Promise<void>}\n */\nasync function updateRole(status) {\n  const roleEl = document.querySelector('[data-region=\"aiprovider_datacurso/role-label\"]');\n  if (!roleEl) {\n    return;\n  }\n  if (status.userassigned && status.role && (status.role.shortname || status.role.name)) {\n    roleEl.textContent = `${status.role.shortname || ''} â€” ${status.role.name || ''}`.trim();\n    roleEl.classList.remove('d-none');\n  } else {\n    roleEl.textContent = '';\n    roleEl.classList.add('d-none');\n  }\n}\n\n/**\n * Update token badge and created label.\n * @param {Object} status\n * @returns {Promise<void>}\n */\nasync function updateToken(status) {\n  const tokenBadge = document.querySelector('[data-region=\"aiprovider_datacurso/token-badge\"]');\n  const tokenCreated = document.querySelector('[data-region=\"aiprovider_datacurso/token-created\"]');\n  await setBadge(tokenBadge, !!status.tokenexists, 'exists', 'missing');\n  if (tokenCreated) {\n    if (status.tokenexists && status.tokencreated) {\n      const label = await getString('created', 'aiprovider_datacurso');\n      tokenCreated.textContent = `${label}: ${status.tokencreated}`;\n      tokenCreated.classList.remove('d-none');\n    } else {\n      tokenCreated.textContent = '';\n      tokenCreated.classList.add('d-none');\n    }\n  }\n}\n\n/**\n * Update registration badge and last sent line.\n * @param {Object} status\n * @returns {Promise<void>}\n */\nasync function updateRegistration(status) {\n  const regBadge = document.querySelector('[data-region=\"aiprovider_datacurso/registration-badge\"]');\n  const regLast = document.querySelector('[data-region=\"aiprovider_datacurso/registration-lastsent\"]');\n  // Badge: success if verified, warning otherwise.\n  if (regBadge) {\n    regBadge.classList.remove('badge-success', 'badge-warning');\n    regBadge.classList.add(status.registration?.verified ? 'badge-success' : 'badge-warning');\n    const key = status.registration?.verified ? 'verified' : 'pending';\n    const label = await getString(key, 'aiprovider_datacurso');\n    regBadge.textContent = label;\n  }\n  if (regLast) {\n    if (status.registration?.lastsent) {\n      const label = await getString('last_sent', 'aiprovider_datacurso');\n      const suffix = status.registration?.laststatus ? ` â€” ${status.registration.laststatus}` : '';\n      regLast.textContent = `${label}: ${status.registration.lastsent}${suffix}`;\n      regLast.classList.remove('d-none');\n    } else {\n      regLast.textContent = '';\n      regLast.classList.add('d-none');\n    }\n  }\n}\n\n/**\n * Apply badge classes and label from lang strings.\n * @param {HTMLElement} el\n * @param {boolean} isOk\n * @param {string} okKey\n * @param {string} failKey\n * @returns {void}\n */\nasync function setBadge(el, isOk, okKey, failKey) {\n  if (!el) {\n    return;\n  }\n  el.classList.remove('badge-success', 'badge-danger');\n  el.classList.add(isOk ? 'badge-success' : 'badge-danger');\n  const label = await getString(isOk ? okKey : failKey, 'aiprovider_datacurso');\n  el.textContent = label;\n}\n"],"names":["setup","log","res","messages","Array","isArray","forEach","m","refreshStatus","addNotification","message","type","e","exception","retry","regenerate","msg","list","document","querySelector","li","createElement","textContent","classList","add","appendChild","status","ws","rest","setBadge","webservicesenabled","restenabled","assigned","userassigned","updateBadges","el","cls","key","isconfigured","retryonly","registration","lastsent","needsrepair","remove","label","updateHeader","badge","nameEl","exists","service","id","name","updateService","roleEl","role","shortname","trim","updateRole","tokenBadge","tokenCreated","tokenexists","tokencreated","updateToken","regBadge","regLast","verified","_status$registration3","suffix","laststatus","updateRegistration","isOk","okKey","failKey","root","btnSetup","btnRetry","btnRegenerate","addEventListener"],"mappings":"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"}