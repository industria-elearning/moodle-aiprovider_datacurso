{"version":3,"file":"webservice_config.min.js","sources":["../src/webservice_config.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * AMD module to handle the Webservice configuration actions for Datacurso.\n * It performs setup, token regeneration, and registration calls and\n * displays progress via UI notifications and a simple log list.\n *\n * @module      aiprovider_datacurso/webservice_config\n * @copyright   2025 Wilber Narvaez <wilber@buendata.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from \"core/notification\";\nimport {get_string as getString} from \"core/str\";\nimport {\n  webserviceSetup,\n  webserviceRegenerateToken,\n} from \"aiprovider_datacurso/repository\";\n\n/**\n * Initialize the webservice configuration.\n */\nexport function init() {\n  const root = document.querySelector(\n    '[data-region=\"aiprovider_datacurso/webservice-root\"]'\n  );\n  if (!root) {\n    return;\n  }\n  const btnSetup = root.querySelector(\n    '[data-region=\"aiprovider_datacurso/webservice-btn-setup\"]'\n  );\n  const btnRetry = root.querySelector(\n    '[data-region=\"aiprovider_datacurso/webservice-btn-retry\"]'\n  );\n  const btnRegenerate = root.querySelector(\n    '[data-region=\"aiprovider_datacurso/webservice-btn-regenerate\"]'\n  );\n\n  if (btnSetup) {\n    btnSetup.addEventListener(\"click\", setup);\n  }\n  if (btnRetry) {\n    btnRetry.addEventListener(\"click\", retry);\n  }\n  if (btnRegenerate) {\n    btnRegenerate.addEventListener(\"click\", regenerate);\n  }\n}\n\n/**\n * Setup the webservice for Datacurso.\n */\nasync function setup() {\n  try {\n    const message = await getString('ws_step_setup', 'aiprovider_datacurso');\n    log(message);\n    const res = await webserviceSetup();\n    if (res.messages && Array.isArray(res.messages)) {\n      res.messages.forEach((m) => log(m));\n    }\n    Notification.addNotification({\n      message: \"Done: setup\",\n      type: \"success\",\n    });\n  } catch (e) {\n    Notification.exception(e);\n    log(\"Error: \" + (e.message || e), \"error\");\n  }\n}\n\n/**\n * Retry the webservice setup for Datacurso.\n */\nasync function retry() {\n    try {\n        const message = await getString('ws_step_token_retry', 'aiprovider_datacurso');\n        log(message);\n        const res = await webserviceSetup();\n        res.messages.forEach((m) => log(m));\n        Notification.addNotification({\n          message: \"Done: retry\",\n          type: \"success\",\n        });\n      } catch (e) {\n        Notification.exception(e);\n        log(\"Error: \" + (e.message || e), \"error\");\n      }\n}\n\n/**\n * Regenerate the webservice token for Datacurso.\n */\nasync function regenerate() {\n  try {\n    const message = await getString('ws_step_token_regenerating', 'aiprovider_datacurso');\n    log(message);\n    const res = await webserviceRegenerateToken();\n    res.messages.forEach((m) => log(m));\n    Notification.addNotification({\n      message: \"Done: regenerate\",\n      type: \"success\",\n    });\n  } catch (e) {\n    Notification.exception(e);\n    log(\"Error: \" + (e.message || e), \"error\");\n  }\n}\n\n/**\n * Log a message to the webservice log.\n *\n * @param {string} msg The message to log.\n * @param {string} type The type of the message.\n */\nfunction log(msg, type = \"info\") {\n  const list = document.querySelector(\n    '[data-region=\"aiprovider_datacurso/webservice-log\"]'\n  );\n  if (!list) {\n    return;\n  }\n  const li = document.createElement(\"li\");\n  li.textContent = msg;\n  li.classList.add(\"mb-1\");\n  if (type === \"success\") {\n    li.classList.add(\"text-success\");\n  } else if (type === \"error\") {\n    li.classList.add(\"text-danger\");\n  } else {\n    li.classList.add(\"text-muted\");\n  }\n  list.appendChild(li);\n}\n"],"names":["setup","log","res","messages","Array","isArray","forEach","m","addNotification","message","type","e","exception","retry","regenerate","msg","list","document","querySelector","li","createElement","textContent","classList","add","appendChild","root","btnSetup","btnRetry","btnRegenerate","addEventListener"],"mappings":";;;;;;;;;oBAkEeA,YAGXC,UADsB,mBAAU,gBAAiB,+BAE3CC,UAAY,iCACdA,IAAIC,UAAYC,MAAMC,QAAQH,IAAIC,WACpCD,IAAIC,SAASG,SAASC,GAAMN,IAAIM,2BAErBC,gBAAgB,CAC3BC,QAAS,cACTC,KAAM,YAER,MAAOC,yBACMC,UAAUD,GACvBV,IAAI,WAAaU,EAAEF,SAAWE,GAAI,yBAOvBE,YAGPZ,UADsB,mBAAU,sBAAuB,gCAErC,kCACdE,SAASG,SAASC,GAAMN,IAAIM,2BACnBC,gBAAgB,CAC3BC,QAAS,cACTC,KAAM,YAER,MAAOC,yBACMC,UAAUD,GACvBV,IAAI,WAAaU,EAAEF,SAAWE,GAAI,yBAO3BG,iBAGXb,UADsB,mBAAU,6BAA8B,gCAE5C,4CACdE,SAASG,SAASC,GAAMN,IAAIM,2BACnBC,gBAAgB,CAC3BC,QAAS,mBACTC,KAAM,YAER,MAAOC,yBACMC,UAAUD,GACvBV,IAAI,WAAaU,EAAEF,SAAWE,GAAI,mBAU7BV,IAAIc,SAAKL,4DAAO,aACjBM,KAAOC,SAASC,cACpB,2DAEGF,kBAGCG,GAAKF,SAASG,cAAc,MAClCD,GAAGE,YAAcN,IACjBI,GAAGG,UAAUC,IAAI,QACJ,YAATb,KACFS,GAAGG,UAAUC,IAAI,gBACC,UAATb,KACTS,GAAGG,UAAUC,IAAI,eAEjBJ,GAAGG,UAAUC,IAAI,cAEnBP,KAAKQ,YAAYL,2FA7GXM,KAAOR,SAASC,cACpB,4DAEGO,kBAGCC,SAAWD,KAAKP,cACpB,6DAEIS,SAAWF,KAAKP,cACpB,6DAEIU,cAAgBH,KAAKP,cACzB,kEAGEQ,UACFA,SAASG,iBAAiB,QAAS7B,OAEjC2B,UACFA,SAASE,iBAAiB,QAAShB,OAEjCe,eACFA,cAAcC,iBAAiB,QAASf"}