define("aiprovider_datacurso/webservice_config",["exports","core/notification","core/str","aiprovider_datacurso/repository"],(function(_exports,_notification,_str,_repository){var obj;
/**
   * AMD module to handle the Webservice configuration actions for Datacurso.
   * It performs setup, token regeneration, and registration calls and
   * displays progress via UI notifications and a simple log list.
   *
   * @module      aiprovider_datacurso/webservice_config
   * @copyright   2025 Wilber Narvaez <wilber@buendata.com>
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */async function setup(){try{log(await(0,_str.get_string)("ws_step_setup","aiprovider_datacurso"));const res=await(0,_repository.webserviceSetup)();res.messages&&Array.isArray(res.messages)&&res.messages.forEach((m=>log(m))),await refreshStatus(),_notification.default.addNotification({message:"Done: setup",type:"success"})}catch(e){_notification.default.exception(e),log("Error: "+(e.message||e),"error")}}async function retry(){try{log(await(0,_str.get_string)("ws_step_token_retry","aiprovider_datacurso"));(await(0,_repository.webserviceSetup)()).messages.forEach((m=>log(m))),await refreshStatus(),_notification.default.addNotification({message:"Done: retry",type:"success"})}catch(e){_notification.default.exception(e),log("Error: "+(e.message||e),"error")}}async function regenerate(){try{log(await(0,_str.get_string)("ws_step_token_regenerating","aiprovider_datacurso"));(await(0,_repository.webserviceRegenerateToken)()).messages.forEach((m=>log(m))),await refreshStatus(),_notification.default.addNotification({message:"Done: regenerate",type:"success"})}catch(e){_notification.default.exception(e),log("Error: "+(e.message||e),"error")}}function log(msg){let type=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"info";const list=document.querySelector('[data-region="aiprovider_datacurso/webservice-log"]');if(!list)return;const li=document.createElement("li");li.textContent=msg,li.classList.add("mb-1"),"success"===type?li.classList.add("text-success"):"error"===type?li.classList.add("text-danger"):li.classList.add("text-muted"),list.appendChild(li)}async function refreshStatus(){try{const status=await(0,_repository.webserviceGetStatus)();!function(status){const ws=document.querySelector('[data-region="aiprovider_datacurso/ws-enabled"]'),rest=document.querySelector('[data-region="aiprovider_datacurso/rest-enabled"]');ws&&setBadge(ws,!!status.webservicesenabled,"enabled","disabled");rest&&setBadge(rest,!!status.restenabled,"enabled","disabled");const assigned=document.querySelector('[data-region="aiprovider_datacurso/user-assigned-badge"]');assigned&&setBadge(assigned,!!status.userassigned,"assigned","not_assigned")}(status),await async function(status){const el=document.querySelector('[data-region="aiprovider_datacurso/header-badge"]');if(!el)return;let cls="badge-danger",key="not_configured";status.isconfigured?(cls="badge-success",key="configured"):status.retryonly||status.registration&&status.registration.lastsent&&status.needsrepair?(cls="badge-warning",key="needs_repair"):(cls="badge-danger",key="not_configured");el.classList.remove("badge-success","badge-warning","badge-danger"),el.classList.add(cls);const label=await(0,_str.get_string)(key,"aiprovider_datacurso");el.textContent=label}(status),await async function(status){const badge=document.querySelector('[data-region="aiprovider_datacurso/service-badge"]'),nameEl=document.querySelector('[data-region="aiprovider_datacurso/service-name"]'),exists=!(!status.service||!status.service.id&&!status.service.name);await setBadge(badge,exists,"exists","not_created"),nameEl&&(nameEl.textContent=exists&&status.service.name||"")}(status),await async function(status){const roleEl=document.querySelector('[data-region="aiprovider_datacurso/role-label"]');if(!roleEl)return;status.userassigned&&status.role&&(status.role.shortname||status.role.name)?(roleEl.textContent="".concat(status.role.shortname||""," — ").concat(status.role.name||"").trim(),roleEl.classList.remove("d-none")):(roleEl.textContent="",roleEl.classList.add("d-none"))}(status),await async function(status){const tokenBadge=document.querySelector('[data-region="aiprovider_datacurso/token-badge"]'),tokenCreated=document.querySelector('[data-region="aiprovider_datacurso/token-created"]');if(await setBadge(tokenBadge,!!status.tokenexists,"exists","missing"),tokenCreated)if(status.tokenexists&&status.tokencreated){const label=await(0,_str.get_string)("created","aiprovider_datacurso");tokenCreated.textContent="".concat(label,": ").concat(status.tokencreated),tokenCreated.classList.remove("d-none")}else tokenCreated.textContent="",tokenCreated.classList.add("d-none")}(status),await async function(status){const regBadge=document.querySelector('[data-region="aiprovider_datacurso/registration-badge"]'),regLast=document.querySelector('[data-region="aiprovider_datacurso/registration-lastsent"]');if(regBadge){var _status$registration,_status$registration2;regBadge.classList.remove("badge-success","badge-warning"),regBadge.classList.add(null!==(_status$registration=status.registration)&&void 0!==_status$registration&&_status$registration.verified?"badge-success":"badge-warning");const key=null!==(_status$registration2=status.registration)&&void 0!==_status$registration2&&_status$registration2.verified?"verified":"pending",label=await(0,_str.get_string)(key,"aiprovider_datacurso");regBadge.textContent=label}var _status$registration3;if(regLast)if(null!==(_status$registration3=status.registration)&&void 0!==_status$registration3&&_status$registration3.lastsent){var _status$registration4;const label=await(0,_str.get_string)("last_sent","aiprovider_datacurso"),suffix=null!==(_status$registration4=status.registration)&&void 0!==_status$registration4&&_status$registration4.laststatus?" — ".concat(status.registration.laststatus):"";regLast.textContent="".concat(label,": ").concat(status.registration.lastsent).concat(suffix),regLast.classList.remove("d-none")}else regLast.textContent="",regLast.classList.add("d-none")}(status)}catch(e){log("Status refresh error: "+(e.message||e),"error")}}async function setBadge(el,isOk,okKey,failKey){if(!el)return;el.classList.remove("badge-success","badge-danger"),el.classList.add(isOk?"badge-success":"badge-danger");const label=await(0,_str.get_string)(isOk?okKey:failKey,"aiprovider_datacurso");el.textContent=label}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=function(){const root=document.querySelector('[data-region="aiprovider_datacurso/webservice-root"]');if(!root)return;const btnSetup=root.querySelector('[data-region="aiprovider_datacurso/webservice-btn-setup"]'),btnRetry=root.querySelector('[data-region="aiprovider_datacurso/webservice-btn-retry"]'),btnRegenerate=root.querySelector('[data-region="aiprovider_datacurso/webservice-btn-regenerate"]');btnSetup&&btnSetup.addEventListener("click",setup);btnRetry&&btnRetry.addEventListener("click",retry);btnRegenerate&&btnRegenerate.addEventListener("click",regenerate);refreshStatus()},_notification=(obj=_notification)&&obj.__esModule?obj:{default:obj}}));

//# sourceMappingURL=webservice_config.min.js.map