{"version":3,"file":"report_charts.min.js","sources":["../src/report_charts.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Report charts module.\n *\n * @module     aiprovider_datacurso/report_charts\n * @copyright  2025 Industria Elearning\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Chart from 'core/chartjs';\nimport { get_string as getString } from 'core/str';\nimport Notification from 'core/notification';\n\nexport const init = async () => {\n\n    const date = await getString('date', 'core');\n    const creditsConsumedMonth = await getString('tokensconsumedmonth', 'aiprovider_datacurso');\n    const creditsConsumedDay = await getString('tokensconsumedday', 'aiprovider_datacurso');\n    const creditsConsumed = await getString('tokensconsumed', 'aiprovider_datacurso');\n\n    const tokensAvailable = document.getElementById('tokens-available');\n    const tokensConsumed = document.getElementById('tokens-consumed');\n\n    let chartBar, chartPie, chartDay;\n    let cachedData = [];\n\n    Promise.all([\n        Ajax.call([{ methodname: 'aiprovider_datacurso_get_credits_balance', args: {} }])[0],\n        Ajax.call([{ methodname: 'aiprovider_datacurso_get_services', args: {} }])[0],\n        Ajax.call([{ methodname: 'aiprovider_datacurso_get_all_consumption', args: {} }])[0],\n    ])\n        .then(([balanceResponse, servicesResponse, consumptionResponse]) => {\n            const balance = balanceResponse?.balance || 0;\n            tokensAvailable.textContent = balance;\n            const services = servicesResponse?.services || [];\n            cachedData = consumptionResponse?.consumption || [];\n            initCharts(services);\n        })\n        .catch(Notification.exception);\n\n    // init grafic\n    const initCharts = (services) => {\n        const filterBar = document.getElementById('filter-service-bar');\n        const filterPie = document.getElementById('filter-service-pie');\n        const filterStart = document.getElementById('filter-start-date');\n        const filterEnd = document.getElementById('filter-end-date');\n\n        const fillSelect = (select) => {\n            if (services?.length) {\n                services.forEach(s => {\n                    const opt = document.createElement('option');\n                    opt.value = s.name;\n                    opt.textContent = s.name;\n                    select.appendChild(opt);\n                });\n            }\n        };\n\n        fillSelect(filterBar);\n        fillSelect(filterPie);\n\n        // Render init used cachedData\n        renderBarChart(cachedData);\n        renderPieChart(cachedData);\n        renderDayChart(cachedData);\n\n        // Listeners filters\n        filterBar.addEventListener('change', () => updateBarChart());\n        filterPie.addEventListener('change', () => updatePieChart());\n        filterStart.addEventListener('change', () => updateDayChart());\n        filterEnd.addEventListener('change', () => updateDayChart());\n    };\n\n    // functions ws\n    const fetchConsumptionData = async (params = {}) => {\n        const defaults = {\n            service: \"\",\n            action: \"\",\n            fromdate: \"\",\n            todate: \"\"\n        };\n        const finalParams = { ...defaults, ...params };\n\n        try {\n            const response = await Ajax.call([{\n                methodname: 'aiprovider_datacurso_get_all_consumption',\n                args: finalParams\n            }])[0];\n\n            if (response.status !== 'success') {\n                return [];\n            }\n            return response.consumption || [];\n\n        } catch (error) {\n            Notification.exception(error);\n            return [];\n        }\n    };\n\n    // grafic bar\n    const renderBarChart = (data) => {\n        const byMonth = {};\n        data.forEach(c => {\n            const month = c.date.substring(0, 7);\n            byMonth[month] = (byMonth[month] || 0) + c.cant_tokens;\n        });\n\n        const totalTokens = data.reduce((sum, c) => sum + (c.cant_tokens || 0), 0);\n        tokensConsumed.textContent = totalTokens;\n\n        const ctx = document.getElementById('chart-tokens-by-month');\n        if (chartBar) {\n            chartBar.destroy();\n        }\n\n        chartBar = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: Object.keys(byMonth),\n                datasets: [{\n                    label: creditsConsumedMonth,\n                    data: Object.values(byMonth),\n                    backgroundColor: '#0073e6',\n                }]\n            },\n            options: { responsive: true, maintainAspectRatio: false }\n        });\n    };\n\n    const updateBarChart = async () => {\n        const service = document.getElementById('filter-service-bar').value;\n        if (!service) {\n            return renderBarChart(cachedData);\n        }\n        const data = await fetchConsumptionData({ service });\n        renderBarChart(data);\n    };\n\n    // grafic pie\n    const renderPieChart = (data) => {\n        const byAction = {};\n        data.forEach(c => {\n            byAction[c.action] = (byAction[c.action] || 0) + c.cant_tokens;\n        });\n\n        const ctx = document.getElementById('chart-actions');\n        if (chartPie) {\n            chartPie.destroy();\n        }\n\n        chartPie = new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: Object.keys(byAction),\n                datasets: [{\n                    data: Object.values(byAction),\n                    backgroundColor: [\n                        '#36A2EB',\n                        '#FF6384',\n                        '#f1d48bff',\n                        '#5ddcdcff',\n                        '#049930ff',\n                        '#0b6eb0ff',\n                        '#d10f39ff',\n                        '#7c611dff',\n                        '#ee9610ff',\n                        '#a50562ff',\n                        '#022082ff',\n                        '#efef21ff',\n                        '#3f4646ff',\n                        '#8f9191ff',\n                        '#0c361bff',\n                        '#bd836cff'\n                    ],\n                }]\n            },\n            options: { responsive: true, maintainAspectRatio: false }\n        });\n    };\n\n    const updatePieChart = async () => {\n        const service = document.getElementById('filter-service-pie').value;\n        if (!service) {\n            return renderPieChart(cachedData);\n        }\n\n        const data = await fetchConsumptionData({ service });\n        renderPieChart(data);\n    };\n\n    // grafic day\n    const renderDayChart = (data) => {\n        const byDay = {};\n        data.forEach(c => {\n            const day = c.date.substring(0, 10);\n            byDay[day] = (byDay[day] || 0) + c.cant_tokens;\n        });\n\n        const labels = Object.keys(byDay).sort((a, b) => new Date(a) - new Date(b));\n        const values = labels.map(day => byDay[day]);\n\n        const ctx = document.getElementById('chart-tokens-by-day');\n        if (chartDay) {\n            chartDay.destroy();\n        }\n\n        chartDay = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels,\n                datasets: [{\n                    label: creditsConsumedDay,\n                    data: values,\n                    borderColor: '#28a745',\n                    backgroundColor: 'rgba(40,167,69,0.2)',\n                    fill: true,\n                    tension: 0.2,\n                    pointRadius: 4,\n                    pointHoverRadius: 6,\n                    borderWidth: 2\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    x: { title: { display: true, text: date } },\n                    y: { title: { display: true, text: creditsConsumed }, beginAtZero: true }\n                }\n            }\n        });\n    };\n\n    const updateDayChart = async () => {\n        const fromdate = document.getElementById('filter-start-date').value;\n        const todate = document.getElementById('filter-end-date').value;\n\n        if (!fromdate && !todate) {\n            return renderDayChart(cachedData);\n        }\n\n        const data = await fetchConsumptionData({ fromdate, todate });\n        renderDayChart(data);\n    };\n};\n"],"names":["async","date","creditsConsumedMonth","creditsConsumedDay","creditsConsumed","tokensAvailable","document","getElementById","tokensConsumed","chartBar","chartPie","chartDay","cachedData","Promise","all","Ajax","call","methodname","args","then","_ref","balanceResponse","servicesResponse","consumptionResponse","balance","textContent","services","consumption","initCharts","catch","Notification","exception","filterBar","filterPie","filterStart","filterEnd","fillSelect","select","length","forEach","s","opt","createElement","value","name","appendChild","renderBarChart","renderPieChart","renderDayChart","addEventListener","updateBarChart","updatePieChart","updateDayChart","fetchConsumptionData","params","defaults","service","action","fromdate","todate","finalParams","response","status","error","data","byMonth","c","month","substring","cant_tokens","totalTokens","reduce","sum","ctx","destroy","Chart","type","labels","Object","keys","datasets","label","values","backgroundColor","options","responsive","maintainAspectRatio","byAction","byDay","day","sort","a","b","Date","map","borderColor","fill","tension","pointRadius","pointHoverRadius","borderWidth","scales","x","title","display","text","y","beginAtZero"],"mappings":"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"}